<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".Generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using Xunit;

namespace Retryable.Tests
{
    public partial class RetryTests
    {
<# for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++) 
{
    var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argumentList = GetGenericList(typeCount, GenericArgumentFormat);
	var argsList = GetGenericList(typeCount, GenericArgumentsFormat);
	var intList = string.Join(",", Enumerable.Range(1, typeCount).Select(n => "int").ToArray());
	var zeroList = string.Join(",", Enumerable.Range(1, typeCount).Select(n => "0").ToArray());
#>
        [Fact]
        public void Action_With_<#= typeCount #>_Args_InvokeWithNoRetry()
        {
            // arrange
            Operations operations = new Operations(0);

            var action = operations.GetAction<<#= intList #>>();

            // act
            action.InvokeWithRetry(RetryPolicies.NoRetry(),<#= zeroList #>);

            // assert
            Assert.Equal(0, operations.ThrowCount);
            Assert.Equal(1, operations.ExecuteCount);
        }

        [Fact]
        public void Func_With_<#= typeCount #>_Args_InvokeWithNoRetry()
        {
            // arrange
            Operations operations = new Operations(0);

            var func = operations.GetFunc<<#= intList #>,int>();

            // act
            func.InvokeWithRetry(RetryPolicies.NoRetry(),<#= zeroList #>);

            // assert
            Assert.Equal(0, operations.ThrowCount);
            Assert.Equal(1, operations.ExecuteCount);
        }

<#
}
#>
    }
}

<#@ Include File="GenericTypeParameters.tt" #>